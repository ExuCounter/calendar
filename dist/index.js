/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={838:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,'*{font-family:"Roboto",sans-serif}html{font-size:10px}body{font-size:100%}.calendar{padding:.5rem;position:absolute;background-color:#fff}.calendar-placement-left{transform:translateY(100%);bottom:-10px;left:0}.calendar-container{position:relative}.calendar-navigation{display:flex;justify-content:space-between;align-items:center;flex-wrap:wrap;font-weight:500;color:#3c4043;padding:0 1rem;margin-bottom:.7rem}.calendar-navigation__year,.calendar-navigation__month{font-size:1.3rem}.calendar-navigation__month{margin-right:.5rem}.calendar-navigation__btn{background-color:transparent;border:none;cursor:pointer;outline:none;padding:0;transition:background-color 100ms linear;width:2rem;height:2rem;border-radius:50%}.calendar-navigation__btn:first-child{margin-right:1rem}.calendar-navigation__btn:hover{background-color:rgba(32,33,36,.039)}.calendar-navigation__btn svg{height:1rem;width:1.5rem;color:#5f6368;fill:#5f6368}.local-days{display:flex}.local-days__name{padding:.5rem;text-align:center;color:#70757a;font-size:1rem;font-weight:500}.days-container{display:flex;flex-wrap:wrap}.days-item{text-align:center;background-color:transparent;border:none;cursor:pointer;border-radius:50%;width:2.4rem;height:2.4rem;font-size:1rem;font-weight:500;transition:background-color 100ms linear;outline:none}.days-item__container{box-sizing:border-box;display:flex;justify-content:center}.days-item.active{background-color:#d2e3fc !important;color:#185abc !important}.days-item.previous,.days-item.next{color:#70757a}.days-item.current{color:#3c4043}.days-item:hover{background-color:#f1f3f4}',"",{version:3,sources:["webpack://./src/components/Calendar/index.scss"],names:[],mappings:"AAAA,EACE,+BAAA,CAGF,KACE,cAAA,CAGF,KACE,cAAA,CAGF,UACE,aAAA,CACA,iBAAA,CACA,qBAAA,CACA,yBACE,0BAAA,CACA,YAAA,CACA,MAAA,CAEF,oBACE,iBAAA,CAEF,qBACE,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,cAAA,CACA,eAAA,CACA,aAAA,CACA,cAAA,CACA,mBAAA,CACA,uDAEE,gBAAA,CAEF,4BACE,kBAAA,CAEF,0BACE,4BAAA,CACA,WAAA,CACA,cAAA,CACA,YAAA,CACA,SAAA,CACA,wCAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,sCACE,iBAAA,CAEF,gCACE,oCAAA,CAEF,8BACE,WAAA,CACA,YAAA,CACA,aAAA,CACA,YAAA,CAMR,YACE,YAAA,CACA,kBACE,aAAA,CACA,iBAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CAKF,gBACE,YAAA,CACA,cAAA,CAEF,WACE,iBAAA,CACA,4BAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,YAAA,CACA,aAAA,CACA,cAAA,CACA,eAAA,CACA,wCAAA,CACA,YAAA,CACA,sBACE,qBAAA,CACA,YAAA,CACA,sBAAA,CAEF,kBACE,mCAAA,CACA,wBAAA,CAEF,oCAEE,aAAA,CAEF,mBACE,aAAA,CAEF,iBACE,wBAAA",sourcesContent:['* {\n  font-family: "Roboto", sans-serif;\n}\n\nhtml {\n  font-size: 10px;\n}\n\nbody {\n  font-size: 100%;\n}\n\n.calendar {\n  padding: 0.5rem;\n  position: absolute;\n  background-color: #fff;\n  &-placement-left {\n    transform: translateY(100%);\n    bottom: -10px;\n    left: 0;\n  }\n  &-container {\n    position: relative;\n  }\n  &-navigation {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    font-weight: 500;\n    color: #3c4043;\n    padding: 0 1rem;\n    margin-bottom: 0.7rem;\n    &__year,\n    &__month {\n      font-size: 1.3rem;\n    }\n    &__month {\n      margin-right: 0.5rem;\n    }\n    &__btn {\n      background-color: transparent;\n      border: none;\n      cursor: pointer;\n      outline: none;\n      padding: 0;\n      transition: background-color 100ms linear;\n      width: 2rem;\n      height: 2rem;\n      border-radius: 50%;\n      &:first-child {\n        margin-right: 1rem;\n      }\n      &:hover {\n        background-color: rgba(32, 33, 36, 0.039);\n      }\n      svg {\n        height: 1rem;\n        width: 1.5rem;\n        color: #5f6368;\n        fill: #5f6368;\n      }\n    }\n  }\n}\n\n.local-days {\n  display: flex;\n  &__name {\n    padding: 0.5rem;\n    text-align: center;\n    color: #70757a;\n    font-size: 1rem;\n    font-weight: 500;\n  }\n}\n\n.days {\n  &-container {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  &-item {\n    text-align: center;\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    border-radius: 50%;\n    width: 2.4rem;\n    height: 2.4rem;\n    font-size: 1rem;\n    font-weight: 500;\n    transition: background-color 100ms linear;\n    outline: none;\n    &__container {\n      box-sizing: border-box;\n      display: flex;\n      justify-content: center;\n    }\n    &.active {\n      background-color: #d2e3fc !important;\n      color: #185abc !important;\n    }\n    &.previous,\n    &.next {\n      color: #70757a;\n    }\n    &.current {\n      color: #3c4043;\n    }\n    &:hover {\n      background-color: #f1f3f4;\n    }\n  }\n}\n'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=e(n);return n[2]?"@media ".concat(n[2]," {").concat(r,"}"):r})).join("")},n.i=function(e,r,t){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);t&&o[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),n.push(u))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}e.exports=function(e){var r,t,o=(t=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],t=!0,o=!1,a=void 0;try{for(var i,c=e[Symbol.iterator]();!(t=(i=c.next()).done)&&(r.push(i.value),!n||r.length!==n);t=!0);}catch(e){o=!0,a=e}finally{try{t||null==c.return||c.return()}finally{if(o)throw a}}return r}}(r,t)||function(e,r){if(e){if("string"==typeof e)return n(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(u," */"),l=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([s]).join("\n")}return[a].join("\n")}},418:e=>{var n=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,t=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},r=0;r<10;r++)n["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var t={};return"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},t)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,c,u=o(e),s=1;s<arguments.length;s++){for(var l in i=Object(arguments[s]))r.call(i,l)&&(u[l]=i[l]);if(n){c=n(i);for(var A=0;A<c.length;A++)t.call(i,c[A])&&(u[c[A]]=i[c[A]])}}return u}},251:(e,n,r)=>{r(418);var t=r(294);if("function"==typeof Symbol&&Symbol.for){var o=Symbol.for;o("react.element"),o("react.fragment")}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Object.prototype.hasOwnProperty},408:(e,n,r)=>{var t=r(418),o=60103,a=60106;n.Fragment=60107,n.StrictMode=60108,n.Profiler=60114;var i=60109,c=60110,u=60112;n.Suspense=60113;var s=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var A=Symbol.for;o=A("react.element"),a=A("react.portal"),n.Fragment=A("react.fragment"),n.StrictMode=A("react.strict_mode"),n.Profiler=A("react.profiler"),i=A("react.provider"),c=A("react.context"),u=A("react.forward_ref"),n.Suspense=A("react.suspense"),s=A("react.memo"),l=A("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function m(e,n,r){this.props=e,this.context=n,this.refs=y,this.updater=r||p}function C(){}function h(e,n,r){this.props=e,this.context=n,this.refs=y,this.updater=r||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,n,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=m.prototype;var b=h.prototype=new C;b.constructor=h,t(b,m.prototype),b.isPureReactComponent=!0;var v={current:null},g=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function w(e,n,r){var t,a={},i=null,c=null;if(null!=n)for(t in void 0!==n.ref&&(c=n.ref),void 0!==n.key&&(i=""+n.key),n)g.call(n,t)&&!_.hasOwnProperty(t)&&(a[t]=n[t]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var s=Array(u),l=0;l<u;l++)s[l]=arguments[l+2];a.children=s}if(e&&e.defaultProps)for(t in u=e.defaultProps)void 0===a[t]&&(a[t]=u[t]);return{$$typeof:o,type:e,key:i,ref:c,props:a,_owner:v.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var S=/\/+/g;function x(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function j(e,n,r,t,i){var c=typeof e;"undefined"!==c&&"boolean"!==c||(e=null);var u=!1;if(null===e)u=!0;else switch(c){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===t?"."+x(u,0):t,Array.isArray(i)?(r="",null!=e&&(r=e.replace(S,"$&/")+"/"),j(i,n,r,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,n){return{$$typeof:o,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(S,"$&/")+"/")+e)),n.push(i)),1;if(u=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var l=t+x(c=e[s],s);u+=j(c,n,r,l,i)}else if("function"==typeof(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=l.call(e),s=0;!(c=e.next()).done;)u+=j(c=c.value,n,r,l=t+x(c,s++),i);else if("object"===c)throw n=""+e,Error(d(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n));return u}function k(e,n,r){if(null==e)return e;var t=[],o=0;return j(e,t,"","",(function(e){return n.call(r,e,o++)})),t}function O(e){if(-1===e._status){var n=e._result;n=n(),e._status=0,e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}if(1===e._status)return e._result;throw e._result}var B={current:null};function R(){var e=B.current;if(null===e)throw Error(d(321));return e}var F={ReactCurrentDispatcher:B,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:v,IsSomeRendererActing:{current:!1},assign:t};n.Children={map:k,forEach:function(e,n,r){k(e,(function(){n.apply(this,arguments)}),r)},count:function(e){var n=0;return k(e,(function(){n++})),n},toArray:function(e){return k(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(d(143));return e}},n.Component=m,n.PureComponent=h,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,n.cloneElement=function(e,n,r){if(null==e)throw Error(d(267,e));var a=t({},e.props),i=e.key,c=e.ref,u=e._owner;if(null!=n){if(void 0!==n.ref&&(c=n.ref,u=v.current),void 0!==n.key&&(i=""+n.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in n)g.call(n,l)&&!_.hasOwnProperty(l)&&(a[l]=void 0===n[l]&&void 0!==s?s[l]:n[l])}var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){s=Array(l);for(var A=0;A<l;A++)s[A]=arguments[A+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:c,props:a,_owner:u}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:c,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},n.createElement=w,n.createFactory=function(e){var n=w.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:u,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:O}},n.memo=function(e,n){return{$$typeof:s,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return R().useCallback(e,n)},n.useContext=function(e,n){return R().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return R().useEffect(e,n)},n.useImperativeHandle=function(e,n,r){return R().useImperativeHandle(e,n,r)},n.useLayoutEffect=function(e,n){return R().useLayoutEffect(e,n)},n.useMemo=function(e,n){return R().useMemo(e,n)},n.useReducer=function(e,n,r){return R().useReducer(e,n,r)},n.useRef=function(e){return R().useRef(e)},n.useState=function(e){return R().useState(e)},n.version="17.0.1"},294:(e,n,r)=>{e.exports=r(408)},893:(e,n,r)=>{r(251)},379:(e,n,r)=>{var t,o=function(){var e={};return function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[n]=r}return e[n]}}(),a=[];function i(e){for(var n=-1,r=0;r<a.length;r++)if(a[r].identifier===e){n=r;break}return n}function c(e,n){for(var r={},t=[],o=0;o<e.length;o++){var c=e[o],u=n.base?c[0]+n.base:c[0],s=r[u]||0,l="".concat(u," ").concat(s);r[u]=s+1;var A=i(l),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(a[A].references++,a[A].updater(f)):a.push({identifier:l,updater:y(f,n),references:1}),t.push(l)}return t}function u(e){var n=document.createElement("style"),t=e.attributes||{};if(void 0===t.nonce){var a=r.nc;a&&(t.nonce=a)}if(Object.keys(t).forEach((function(e){n.setAttribute(e,t[e])})),"function"==typeof e.insert)e.insert(n);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var s,l=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function A(e,n,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(e.styleSheet)e.styleSheet.cssText=l(n,o);else{var a=document.createTextNode(o),i=e.childNodes;i[n]&&e.removeChild(i[n]),i.length?e.insertBefore(a,i[n]):e.appendChild(a)}}function f(e,n,r){var t=r.css,o=r.media,a=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}var d=null,p=0;function y(e,n){var r,t,o;if(n.singleton){var a=p++;r=d||(d=u(n)),t=A.bind(null,r,a,!1),o=A.bind(null,r,a,!0)}else r=u(n),t=f.bind(null,r,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var r=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var t=0;t<r.length;t++){var o=i(r[t]);a[o].references--}for(var u=c(e,n),s=0;s<r.length;s++){var l=i(r[s]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}r=u}}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e,n,t,o;r(893),(0,r(294).createContext)(new Date).Provider,(o=e||(e={}))[o.Sunday=0]="Sunday",o[o.Monday=1]="Monday",o[o.Tuesday=2]="Tuesday",o[o.Wednesday=3]="Wednesday",o[o.Thursday=4]="Thursday",o[o.Friday=5]="Friday",o[o.Saturday=6]="Saturday",(t=n||(n={}))[t.January=1]="January",t[t.February=2]="February",t[t.March=3]="March",t[t.April=4]="April",t[t.May=5]="May",t[t.June=6]="June",t[t.July=7]="July",t[t.August=8]="August",t[t.September=9]="September",t[t.October=10]="October",t[t.November=11]="November",t[t.December=12]="December";var a=r(379),i=r.n(a),c=r(838);i()(c.Z,{insert:"head",singleton:!1}),c.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhci9pbmRleC5zY3NzIiwid2VicGFjazovL3NtYWxsLWdvb2dsZS1jYWxlbmRhci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3NtYWxsLWdvb2dsZS1jYWxlbmRhci8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3NtYWxsLWdvb2dsZS1jYWxlbmRhci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhci90eXBlcy50cyIsIndlYnBhY2s6Ly9zbWFsbC1nb29nbGUtY2FsZW5kYXIvLi9zcmMvY29tcG9uZW50cy9DYWxlbmRhci9DYWxlbmRhckNvbnRleHQudHMiLCJ3ZWJwYWNrOi8vc21hbGwtZ29vZ2xlLWNhbGVuZGFyLy4vc3JjL2NvbXBvbmVudHMvQ2FsZW5kYXIvaW5kZXguc2Nzcz8xZmMzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiYXNzaWduIiwidGVzdDEiLCJTdHJpbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsInNwbGl0IiwiZm9yRWFjaCIsImxldHRlciIsImtleXMiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzeW1ib2xzIiwidG8iLCJzIiwiYXJndW1lbnRzIiwia2V5IiwiZiIsImZvciIsImgiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwibCIsInAiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJQcm9maWxlciIsInEiLCJyIiwidCIsIlN1c3BlbnNlIiwidSIsInYiLCJ3IiwieCIsInoiLCJhIiwiYiIsImMiLCJBIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwicHJvcHMiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJEIiwiRSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJGIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJHIiwiY3VycmVudCIsIkgiLCJJIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiZSIsImQiLCJrIiwiZyIsImNoaWxkcmVuIiwibSIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwidHlwZSIsIl9vd25lciIsIkwiLCJNIiwiTiIsInJlcGxhY2UiLCJlc2NhcGUiLCJPIiwiSyIsInkiLCJQIiwiUSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsImRlZmF1bHQiLCJSIiwiUyIsIlQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJ0cmFuc2l0aW9uIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJDaGlsZHJlbiIsImFwcGx5IiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUZhY3RvcnkiLCJiaW5kIiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJtZW1vIiwiY29tcGFyZSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInZlcnNpb24iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJNb250aCIsIkxvY2FsRGF5IiwiRGF0ZSJdLCJtYXBwaW5ncyI6Ijt1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxzakRBQXlqRCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxrREFBa0QsTUFBUSxHQUFHLFNBQVcscXdCQUFxd0IsZUFBaUIsQ0FBQyw4a0VBQWdsRSxXQUFhLE1BRXpqSixXLFFDQ0FELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVU4sRUFBdUJLLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxLQUdsREEsS0FDTkUsS0FBSyxLQUtWUCxFQUFLUSxFQUFJLFNBQVVDLEVBQVNDLEVBQVlDLEdBQ2YsaUJBQVpGLElBRVRBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLEVBQVMsTUFHN0IsSUFBSUcsRUFBeUIsR0FFN0IsR0FBSUQsRUFDRixJQUFLLElBQUlILEVBQUksRUFBR0EsRUFBSU4sS0FBS1csT0FBUUwsSUFBSyxDQUVwQyxJQUFJWCxFQUFLSyxLQUFLTSxHQUFHLEdBRVAsTUFBTlgsSUFDRmUsRUFBdUJmLElBQU0sR0FLbkMsSUFBSyxJQUFJaUIsRUFBSyxFQUFHQSxFQUFLTCxFQUFRSSxPQUFRQyxJQUFNLENBQzFDLElBQUlWLEVBQU8sR0FBR0UsT0FBT0csRUFBUUssSUFFekJILEdBQVVDLEVBQXVCUixFQUFLLE1BS3RDTSxJQUNHTixFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHRSxPQUFPSSxFQUFZLFNBQVNKLE9BQU9GLEVBQUssSUFGckRBLEVBQUssR0FBS00sR0FNZFYsRUFBS0wsS0FBS1MsTUFJUEosSSxPQ3hEVCxTQUFTZSxFQUFrQkMsRUFBS0MsSUFBa0IsTUFBUEEsR0FBZUEsRUFBTUQsRUFBSUgsVUFBUUksRUFBTUQsRUFBSUgsUUFBUSxJQUFLLElBQUlMLEVBQUksRUFBR1UsRUFBTyxJQUFJQyxNQUFNRixHQUFNVCxFQUFJUyxFQUFLVCxJQUFPVSxFQUFLVixHQUFLUSxFQUFJUixHQUFNLE9BQU9VLEVBTWhMdEIsRUFBT0UsUUFBVSxTQUFnQ00sR0FDL0MsSUFic0JZLEVBQUtSLEVBYXZCWSxHQWJ1QlosRUFhTSxFQUhuQyxTQUF5QlEsR0FBTyxHQUFJRyxNQUFNRSxRQUFRTCxHQUFNLE9BQU9BLEVBVnRCTSxDQUFqQk4sRUFhS1osSUFMN0IsU0FBK0JZLEVBQUtSLEdBQUssR0FBc0Isb0JBQVhlLFFBQTRCQSxPQUFPQyxZQUFZQyxPQUFPVCxHQUFqRSxDQUFnRixJQUFJVSxFQUFPLEdBQVFDLEdBQUssRUFBVUMsR0FBSyxFQUFXQyxPQUFLQyxFQUFXLElBQU0sSUFBSyxJQUFpQ0MsRUFBN0JqQixFQUFLRSxFQUFJTyxPQUFPQyxjQUFtQkcsR0FBTUksRUFBS2pCLEVBQUdrQixRQUFRQyxRQUFvQlAsRUFBSy9CLEtBQUtvQyxFQUFHRyxRQUFZMUIsR0FBS2tCLEVBQUtiLFNBQVdMLEdBQTNEbUIsR0FBSyxJQUFvRSxNQUFPUSxHQUFPUCxHQUFLLEVBQU1DLEVBQUtNLEVBQU8sUUFBVSxJQUFXUixHQUFzQixNQUFoQmIsRUFBVyxRQUFXQSxFQUFXLFNBQU8sUUFBVSxHQUFJYyxFQUFJLE1BQU1DLEdBQVEsT0FBT0gsR0FSamFVLENBQXNCcEIsRUFBS1IsSUFJNUYsU0FBcUM2QixFQUFHQyxHQUFVLEdBQUtELEVBQUwsQ0FBZ0IsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU90QixFQUFrQnNCLEVBQUdDLEdBQVMsSUFBSUMsRUFBSWQsT0FBT2UsVUFBVXZDLFNBQVN3QyxLQUFLSixHQUFHSyxNQUFNLEdBQUksR0FBaUUsTUFBbkQsV0FBTkgsR0FBa0JGLEVBQUVNLGNBQWFKLEVBQUlGLEVBQUVNLFlBQVlDLE1BQWdCLFFBQU5MLEdBQXFCLFFBQU5BLEVBQW9CcEIsTUFBTTBCLEtBQUtSLEdBQWMsY0FBTkUsR0FBcUIsMkNBQTJDTyxLQUFLUCxHQUFXeEIsRUFBa0JzQixFQUFHQyxRQUF6RyxHQUozTVMsQ0FBNEIvQixFQUFLUixJQUVuSSxXQUE4QixNQUFNLElBQUl3QyxVQUFVLDZJQUZ1RkMsSUFjbkk1QyxFQUFVZSxFQUFNLEdBQ2hCOEIsRUFBYTlCLEVBQU0sR0FFdkIsR0FBb0IsbUJBQVQrQixLQUFxQixDQUU5QixJQUFJQyxFQUFTRCxLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVOLE1BQ3pETyxFQUFPLCtEQUErRG5ELE9BQU84QyxHQUM3RU0sRUFBZ0IsT0FBT3BELE9BQU9tRCxFQUFNLE9BQ3BDRSxFQUFhVCxFQUFXVSxRQUFRekQsS0FBSSxTQUFVMEQsR0FDaEQsTUFBTyxpQkFBaUJ2RCxPQUFPNEMsRUFBV1ksWUFBYyxJQUFJeEQsT0FBT3VELEVBQVEsVUFFN0UsTUFBTyxDQUFDeEQsR0FBU0MsT0FBT3FELEdBQVlyRCxPQUFPLENBQUNvRCxJQUFnQm5ELEtBQUssTUFHbkUsTUFBTyxDQUFDRixHQUFTRSxLQUFLLFEsUUN0QnhCLElBQUl3RCxFQUF3QnRDLE9BQU9zQyxzQkFDL0JDLEVBQWlCdkMsT0FBT2UsVUFBVXdCLGVBQ2xDQyxFQUFtQnhDLE9BQU9lLFVBQVUwQixxQkFFeEMsU0FBU0MsRUFBU0MsR0FDakIsR0FBSUEsUUFDSCxNQUFNLElBQUlwQixVQUFVLHlEQUdyQixPQUFPdkIsT0FBTzJDLEdBK0NmeEUsRUFBT0UsUUE1Q1AsV0FDQyxJQUNDLElBQUsyQixPQUFPNEMsT0FDWCxPQUFPLEVBTVIsSUFBSUMsRUFBUSxJQUFJQyxPQUFPLE9BRXZCLEdBREFELEVBQU0sR0FBSyxLQUNrQyxNQUF6QzdDLE9BQU8rQyxvQkFBb0JGLEdBQU8sR0FDckMsT0FBTyxFQUtSLElBREEsSUFBSUcsRUFBUSxHQUNIakUsRUFBSSxFQUFHQSxFQUFJLEdBQUlBLElBQ3ZCaUUsRUFBTSxJQUFNRixPQUFPRyxhQUFhbEUsSUFBTUEsRUFLdkMsR0FBd0IsZUFIWGlCLE9BQU8rQyxvQkFBb0JDLEdBQU90RSxLQUFJLFNBQVVvQyxHQUM1RCxPQUFPa0MsRUFBTWxDLE1BRUhoQyxLQUFLLElBQ2YsT0FBTyxFQUlSLElBQUlvRSxFQUFRLEdBSVosTUFIQSx1QkFBdUJDLE1BQU0sSUFBSUMsU0FBUSxTQUFVQyxHQUNsREgsRUFBTUcsR0FBVUEsS0FHZix5QkFERXJELE9BQU9zRCxLQUFLdEQsT0FBTzRDLE9BQU8sR0FBSU0sSUFBUXBFLEtBQUssSUFNOUMsTUFBTzRCLEdBRVIsT0FBTyxHQUlRNkMsR0FBb0J2RCxPQUFPNEMsT0FBUyxTQUFVWSxFQUFRcEIsR0FLdEUsSUFKQSxJQUFJaEIsRUFFQXFDLEVBREFDLEVBQUtoQixFQUFTYyxHQUdURyxFQUFJLEVBQUdBLEVBQUlDLFVBQVV4RSxPQUFRdUUsSUFBSyxDQUcxQyxJQUFLLElBQUlFLEtBRlR6QyxFQUFPcEIsT0FBTzRELFVBQVVELElBR25CcEIsRUFBZXZCLEtBQUtJLEVBQU15QyxLQUM3QkgsRUFBR0csR0FBT3pDLEVBQUt5QyxJQUlqQixHQUFJdkIsRUFBdUIsQ0FDMUJtQixFQUFVbkIsRUFBc0JsQixHQUNoQyxJQUFLLElBQUlyQyxFQUFJLEVBQUdBLEVBQUkwRSxFQUFRckUsT0FBUUwsSUFDL0J5RCxFQUFpQnhCLEtBQUtJLEVBQU1xQyxFQUFRMUUsTUFDdkMyRSxFQUFHRCxFQUFRMUUsSUFBTXFDLEVBQUtxQyxFQUFRMUUsTUFNbEMsT0FBTzJFLEksY0NoRkssRUFBUSxLQUFpQixJQUFJSSxFQUFFLEVBQVEsS0FBd0MsR0FBRyxtQkFBb0JoRSxRQUFRQSxPQUFPaUUsSUFBSSxDQUFDLElBQUlDLEVBQUVsRSxPQUFPaUUsSUFBTUMsRUFBRSxpQkFBa0NBLEVBQUUsa0JBQXdCRixFQUFFRyxtREFBbURDLGtCQUFvQmxFLE9BQU9lLFVBQVV3QixnQixjQ0FyUyxJQUFJNEIsRUFBRSxFQUFRLEtBQWlCckQsRUFBRSxNQUFNc0QsRUFBRSxNQUFNL0YsRUFBUWdHLFNBQVMsTUFBTWhHLEVBQVFpRyxXQUFXLE1BQU1qRyxFQUFRa0csU0FBUyxNQUFNLElBQUlDLEVBQUUsTUFBTUMsRUFBRSxNQUFNQyxFQUFFLE1BQU1yRyxFQUFRc0csU0FBUyxNQUFNLElBQUlDLEVBQUUsTUFBTUMsRUFBRSxNQUNwTSxHQUFHLG1CQUFvQi9FLFFBQVFBLE9BQU9pRSxJQUFJLENBQUMsSUFBSWUsRUFBRWhGLE9BQU9pRSxJQUFJakQsRUFBRWdFLEVBQUUsaUJBQWlCVixFQUFFVSxFQUFFLGdCQUFnQnpHLEVBQVFnRyxTQUFTUyxFQUFFLGtCQUFrQnpHLEVBQVFpRyxXQUFXUSxFQUFFLHFCQUFxQnpHLEVBQVFrRyxTQUFTTyxFQUFFLGtCQUFrQk4sRUFBRU0sRUFBRSxrQkFBa0JMLEVBQUVLLEVBQUUsaUJBQWlCSixFQUFFSSxFQUFFLHFCQUFxQnpHLEVBQVFzRyxTQUFTRyxFQUFFLGtCQUFrQkYsRUFBRUUsRUFBRSxjQUFjRCxFQUFFQyxFQUFFLGNBQWMsSUFBSUMsRUFBRSxtQkFBb0JqRixRQUFRQSxPQUFPQyxTQUN0UixTQUFTaUYsRUFBRUMsR0FBRyxJQUFJLElBQUlDLEVBQUUseURBQXlERCxFQUFFRSxFQUFFLEVBQUVBLEVBQUV2QixVQUFVeEUsT0FBTytGLElBQUlELEdBQUcsV0FBV3JELG1CQUFtQitCLFVBQVV1QixJQUFJLE1BQU0seUJBQXlCRixFQUFFLFdBQVdDLEVBQUUsaUhBQ3BVLElBQUlFLEVBQUUsQ0FBQ0MsVUFBVSxXQUFXLE9BQU0sR0FBSUMsbUJBQW1CLGFBQWFDLG9CQUFvQixhQUFhQyxnQkFBZ0IsY0FBY0MsRUFBRSxHQUFHLFNBQVNDLEVBQUVULEVBQUVDLEVBQUVDLEdBQUcxRyxLQUFLa0gsTUFBTVYsRUFBRXhHLEtBQUttSCxRQUFRVixFQUFFekcsS0FBS29ILEtBQUtKLEVBQUVoSCxLQUFLcUgsUUFBUVgsR0FBR0MsRUFDcE4sU0FBU1csS0FBNkIsU0FBU0MsRUFBRWYsRUFBRUMsRUFBRUMsR0FBRzFHLEtBQUtrSCxNQUFNVixFQUFFeEcsS0FBS21ILFFBQVFWLEVBQUV6RyxLQUFLb0gsS0FBS0osRUFBRWhILEtBQUtxSCxRQUFRWCxHQUFHQyxFQURzR00sRUFBRTNFLFVBQVVrRixpQkFBaUIsR0FBR1AsRUFBRTNFLFVBQVVtRixTQUFTLFNBQVNqQixFQUFFQyxHQUFHLEdBQUcsaUJBQWtCRCxHQUFHLG1CQUFvQkEsR0FBRyxNQUFNQSxFQUFFLE1BQU1rQixNQUFNbkIsRUFBRSxLQUFLdkcsS0FBS3FILFFBQVFOLGdCQUFnQi9HLEtBQUt3RyxFQUFFQyxFQUFFLGFBQWFRLEVBQUUzRSxVQUFVcUYsWUFBWSxTQUFTbkIsR0FBR3hHLEtBQUtxSCxRQUFRUixtQkFBbUI3RyxLQUFLd0csRUFBRSxnQkFDbmRjLEVBQUVoRixVQUFVMkUsRUFBRTNFLFVBQXNGLElBQUlzRixFQUFFTCxFQUFFakYsVUFBVSxJQUFJZ0YsRUFBRU0sRUFBRW5GLFlBQVk4RSxFQUFFN0IsRUFBRWtDLEVBQUVYLEVBQUUzRSxXQUFXc0YsRUFBRUMsc0JBQXFCLEVBQUcsSUFBSUMsRUFBRSxDQUFDQyxRQUFRLE1BQU1DLEVBQUV6RyxPQUFPZSxVQUFVd0IsZUFBZW1FLEVBQUUsQ0FBQzdDLEtBQUksRUFBRzhDLEtBQUksRUFBR0MsUUFBTyxFQUFHQyxVQUFTLEdBQ2hTLFNBQVNDLEVBQUU3QixFQUFFQyxFQUFFQyxHQUFHLElBQUk0QixFQUFFQyxFQUFFLEdBQUdDLEVBQUUsS0FBS2pELEVBQUUsS0FBSyxHQUFHLE1BQU1rQixFQUFFLElBQUk2QixVQUFLLElBQVM3QixFQUFFeUIsTUFBTTNDLEVBQUVrQixFQUFFeUIsVUFBSyxJQUFTekIsRUFBRXJCLE1BQU1vRCxFQUFFLEdBQUcvQixFQUFFckIsS0FBS3FCLEVBQUV1QixFQUFFekYsS0FBS2tFLEVBQUU2QixLQUFLTCxFQUFFbkUsZUFBZXdFLEtBQUtDLEVBQUVELEdBQUc3QixFQUFFNkIsSUFBSSxJQUFJRyxFQUFFdEQsVUFBVXhFLE9BQU8sRUFBRSxHQUFHLElBQUk4SCxFQUFFRixFQUFFRyxTQUFTaEMsT0FBTyxHQUFHLEVBQUUrQixFQUFFLENBQUMsSUFBSSxJQUFJcEQsRUFBRXBFLE1BQU13SCxHQUFHRSxFQUFFLEVBQUVBLEVBQUVGLEVBQUVFLElBQUl0RCxFQUFFc0QsR0FBR3hELFVBQVV3RCxFQUFFLEdBQUdKLEVBQUVHLFNBQVNyRCxFQUFFLEdBQUdtQixHQUFHQSxFQUFFb0MsYUFBYSxJQUFJTixLQUFLRyxFQUFFakMsRUFBRW9DLGtCQUFlLElBQVNMLEVBQUVELEtBQUtDLEVBQUVELEdBQUdHLEVBQUVILElBQUksTUFBTSxDQUFDTyxTQUFTeEcsRUFBRXlHLEtBQUt0QyxFQUFFcEIsSUFBSW9ELEVBQUVOLElBQUkzQyxFQUFFMkIsTUFBTXFCLEVBQUVRLE9BQU9qQixFQUFFQyxTQUN4VSxTQUFTaUIsRUFBRXhDLEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXFDLFdBQVd4RyxFQUFxRyxJQUFJNEcsRUFBRSxPQUFPLFNBQVNDLEVBQUUxQyxFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRXBCLElBQTdLLFNBQWdCb0IsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLElBQUlELEVBQUUyQyxRQUFRLFNBQVEsU0FBUzNDLEdBQUcsT0FBT0MsRUFBRUQsTUFBbUY0QyxDQUFPLEdBQUc1QyxFQUFFcEIsS0FBS3FCLEVBQUUxRyxTQUFTLElBQzVXLFNBQVNzSixFQUFFN0MsRUFBRUMsRUFBRUMsRUFBRTRCLEVBQUVDLEdBQUcsSUFBSUMsU0FBU2hDLEVBQUssY0FBY2dDLEdBQUcsWUFBWUEsSUFBRWhDLEVBQUUsTUFBSyxJQUFJakIsR0FBRSxFQUFHLEdBQUcsT0FBT2lCLEVBQUVqQixHQUFFLE9BQVEsT0FBT2lELEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU2pELEdBQUUsRUFBRyxNQUFNLElBQUssU0FBUyxPQUFPaUIsRUFBRXFDLFVBQVUsS0FBS3hHLEVBQUUsS0FBS3NELEVBQUVKLEdBQUUsR0FBSSxHQUFHQSxFQUFFLE9BQVdnRCxFQUFFQSxFQUFOaEQsRUFBRWlCLEdBQVNBLEVBQUUsS0FBSzhCLEVBQUUsSUFBSVksRUFBRTNELEVBQUUsR0FBRytDLEVBQUVySCxNQUFNRSxRQUFRb0gsSUFBSTdCLEVBQUUsR0FBRyxNQUFNRixJQUFJRSxFQUFFRixFQUFFMkMsUUFBUUYsRUFBRSxPQUFPLEtBQUtJLEVBQUVkLEVBQUU5QixFQUFFQyxFQUFFLElBQUcsU0FBU0YsR0FBRyxPQUFPQSxNQUFLLE1BQU0rQixJQUFJUyxFQUFFVCxLQUFLQSxFQUQvVyxTQUFXL0IsRUFBRUMsR0FBRyxNQUFNLENBQUNvQyxTQUFTeEcsRUFBRXlHLEtBQUt0QyxFQUFFc0MsS0FBSzFELElBQUlxQixFQUFFeUIsSUFBSTFCLEVBQUUwQixJQUFJaEIsTUFBTVYsRUFBRVUsTUFBTTZCLE9BQU92QyxFQUFFdUMsUUFDNFJPLENBQUVmLEVBQUU3QixJQUFJNkIsRUFBRW5ELEtBQUtHLEdBQUdBLEVBQUVILE1BQU1tRCxFQUFFbkQsSUFBSSxJQUFJLEdBQUdtRCxFQUFFbkQsS0FBSytELFFBQVFGLEVBQUUsT0FBTyxLQUFLekMsSUFBSUMsRUFBRWhILEtBQUs4SSxJQUFJLEVBQXlCLEdBQXZCaEQsRUFBRSxFQUFFK0MsRUFBRSxLQUFLQSxFQUFFLElBQUlBLEVBQUUsSUFBT3JILE1BQU1FLFFBQVFxRixHQUFHLElBQUksSUFBSWlDLEVBQ3pmLEVBQUVBLEVBQUVqQyxFQUFFN0YsT0FBTzhILElBQUksQ0FBUSxJQUFJcEQsRUFBRWlELEVBQUVZLEVBQWZWLEVBQUVoQyxFQUFFaUMsR0FBZUEsR0FBR2xELEdBQUc4RCxFQUFFYixFQUFFL0IsRUFBRUMsRUFBRXJCLEVBQUVrRCxRQUFRLEdBQVUsbUJBQVBsRCxFQU5oRSxTQUFXbUIsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRUYsR0FBR0UsRUFBRUYsSUFBSUUsRUFBRSxlQUEwQ0EsRUFBRSxLQU1sRCtDLENBQUUvQyxJQUF5QixJQUFJQSxFQUFFbkIsRUFBRTlDLEtBQUtpRSxHQUFHaUMsRUFBRSxJQUFJRCxFQUFFaEMsRUFBRTFFLFFBQVFDLE1BQTZCd0QsR0FBRzhELEVBQTFCYixFQUFFQSxFQUFFeEcsTUFBMEJ5RSxFQUFFQyxFQUF0QnJCLEVBQUVpRCxFQUFFWSxFQUFFVixFQUFFQyxLQUFrQkYsUUFBUSxHQUFHLFdBQVdDLEVBQUUsTUFBTS9CLEVBQUUsR0FBR0QsRUFBRWtCLE1BQU1uQixFQUFFLEdBQUcsb0JBQW9CRSxFQUFFLHFCQUFxQmxGLE9BQU9zRCxLQUFLMkIsR0FBR25HLEtBQUssTUFBTSxJQUFJb0csSUFBSSxPQUFPbEIsRUFBRSxTQUFTaUUsRUFBRWhELEVBQUVDLEVBQUVDLEdBQUcsR0FBRyxNQUFNRixFQUFFLE9BQU9BLEVBQUUsSUFBSThCLEVBQUUsR0FBR0MsRUFBRSxFQUFtRCxPQUFqRGMsRUFBRTdDLEVBQUU4QixFQUFFLEdBQUcsSUFBRyxTQUFTOUIsR0FBRyxPQUFPQyxFQUFFbEUsS0FBS21FLEVBQUVGLEVBQUUrQixRQUFjRCxFQUMxWixTQUFTbUIsRUFBRWpELEdBQUcsSUFBSSxJQUFJQSxFQUFFa0QsUUFBUSxDQUFDLElBQUlqRCxFQUFFRCxFQUFFbUQsUUFBUWxELEVBQUVBLElBQUlELEVBQUVrRCxRQUFRLEVBQUVsRCxFQUFFbUQsUUFBUWxELEVBQUVBLEVBQUVtRCxNQUFLLFNBQVNuRCxHQUFHLElBQUlELEVBQUVrRCxVQUFVakQsRUFBRUEsRUFBRW9ELFFBQVFyRCxFQUFFa0QsUUFBUSxFQUFFbEQsRUFBRW1ELFFBQVFsRCxNQUFJLFNBQVNBLEdBQUcsSUFBSUQsRUFBRWtELFVBQVVsRCxFQUFFa0QsUUFBUSxFQUFFbEQsRUFBRW1ELFFBQVFsRCxNQUFLLEdBQUcsSUFBSUQsRUFBRWtELFFBQVEsT0FBT2xELEVBQUVtRCxRQUFRLE1BQU1uRCxFQUFFbUQsUUFBUyxJQUFJRyxFQUFFLENBQUMvQixRQUFRLE1BQU0sU0FBU2dDLElBQUksSUFBSXZELEVBQUVzRCxFQUFFL0IsUUFBUSxHQUFHLE9BQU92QixFQUFFLE1BQU1rQixNQUFNbkIsRUFBRSxNQUFNLE9BQU9DLEVBQUUsSUFBSXdELEVBQUUsQ0FBQ0MsdUJBQXVCSCxFQUFFSSx3QkFBd0IsQ0FBQ0MsV0FBVyxHQUFHMUUsa0JBQWtCcUMsRUFBRXNDLHFCQUFxQixDQUFDckMsU0FBUSxHQUFJNUQsT0FBT3VCLEdBQ2plOUYsRUFBUXlLLFNBQVMsQ0FBQ3BLLElBQUl1SixFQUFFN0UsUUFBUSxTQUFTNkIsRUFBRUMsRUFBRUMsR0FBRzhDLEVBQUVoRCxHQUFFLFdBQVdDLEVBQUU2RCxNQUFNdEssS0FBS21GLGFBQVl1QixJQUFJNkQsTUFBTSxTQUFTL0QsR0FBRyxJQUFJQyxFQUFFLEVBQXVCLE9BQXJCK0MsRUFBRWhELEdBQUUsV0FBV0MsT0FBYUEsR0FBRytELFFBQVEsU0FBU2hFLEdBQUcsT0FBT2dELEVBQUVoRCxHQUFFLFNBQVNBLEdBQUcsT0FBT0EsTUFBSyxJQUFJaUUsS0FBSyxTQUFTakUsR0FBRyxJQUFJd0MsRUFBRXhDLEdBQUcsTUFBTWtCLE1BQU1uQixFQUFFLE1BQU0sT0FBT0MsSUFBSTVHLEVBQVE4SyxVQUFVekQsRUFBRXJILEVBQVErSyxjQUFjcEQsRUFBRTNILEVBQVE0RixtREFBbUR3RSxFQUNoWHBLLEVBQVFnTCxhQUFhLFNBQVNwRSxFQUFFQyxFQUFFQyxHQUFHLEdBQUcsTUFBT0YsRUFBYyxNQUFNa0IsTUFBTW5CLEVBQUUsSUFBSUMsSUFBSSxJQUFJOEIsRUFBRTVDLEVBQUUsR0FBR2MsRUFBRVUsT0FBT3FCLEVBQUUvQixFQUFFcEIsSUFBSW9ELEVBQUVoQyxFQUFFMEIsSUFBSTNDLEVBQUVpQixFQUFFdUMsT0FBTyxHQUFHLE1BQU10QyxFQUFFLENBQW9FLFFBQW5FLElBQVNBLEVBQUV5QixNQUFNTSxFQUFFL0IsRUFBRXlCLElBQUkzQyxFQUFFdUMsRUFBRUMsY0FBUyxJQUFTdEIsRUFBRXJCLE1BQU1tRCxFQUFFLEdBQUc5QixFQUFFckIsS0FBUW9CLEVBQUVzQyxNQUFNdEMsRUFBRXNDLEtBQUtGLGFBQWEsSUFBSUgsRUFBRWpDLEVBQUVzQyxLQUFLRixhQUFhLElBQUl2RCxLQUFLb0IsRUFBRXVCLEVBQUV6RixLQUFLa0UsRUFBRXBCLEtBQUs0QyxFQUFFbkUsZUFBZXVCLEtBQUtpRCxFQUFFakQsUUFBRyxJQUFTb0IsRUFBRXBCLFNBQUksSUFBU29ELEVBQUVBLEVBQUVwRCxHQUFHb0IsRUFBRXBCLElBQUksSUFBSUEsRUFBRUYsVUFBVXhFLE9BQU8sRUFBRSxHQUFHLElBQUkwRSxFQUFFaUQsRUFBRUksU0FBU2hDLE9BQU8sR0FBRyxFQUFFckIsRUFBRSxDQUFDb0QsRUFBRXhILE1BQU1vRSxHQUFHLElBQUksSUFBSXNELEVBQUUsRUFBRUEsRUFBRXRELEVBQUVzRCxJQUFJRixFQUFFRSxHQUFHeEQsVUFBVXdELEVBQUUsR0FBR0wsRUFBRUksU0FBU0QsRUFBRSxNQUFNLENBQUNJLFNBQVN4RyxFQUFFeUcsS0FBS3RDLEVBQUVzQyxLQUN4ZjFELElBQUltRCxFQUFFTCxJQUFJTSxFQUFFdEIsTUFBTW9CLEVBQUVTLE9BQU94RCxJQUFJM0YsRUFBUWlMLGNBQWMsU0FBU3JFLEVBQUVDLEdBQThLLFlBQTNLLElBQVNBLElBQUlBLEVBQUUsT0FBTUQsRUFBRSxDQUFDcUMsU0FBUzdDLEVBQUU4RSxzQkFBc0JyRSxFQUFFc0UsY0FBY3ZFLEVBQUV3RSxlQUFleEUsRUFBRXlFLGFBQWEsRUFBRUMsU0FBUyxLQUFLQyxTQUFTLE9BQVFELFNBQVMsQ0FBQ3JDLFNBQVM5QyxFQUFFcUYsU0FBUzVFLEdBQVVBLEVBQUUyRSxTQUFTM0UsR0FBRzVHLEVBQVF5TCxjQUFjaEQsRUFBRXpJLEVBQVEwTCxjQUFjLFNBQVM5RSxHQUFHLElBQUlDLEVBQUU0QixFQUFFa0QsS0FBSyxLQUFLL0UsR0FBWSxPQUFUQyxFQUFFcUMsS0FBS3RDLEVBQVNDLEdBQUc3RyxFQUFRNEwsVUFBVSxXQUFXLE1BQU0sQ0FBQ3pELFFBQVEsT0FBT25JLEVBQVE2TCxXQUFXLFNBQVNqRixHQUFHLE1BQU0sQ0FBQ3FDLFNBQVM1QyxFQUFFeUYsT0FBT2xGLElBQUk1RyxFQUFRK0wsZUFBZTNDLEVBQzNlcEosRUFBUWdNLEtBQUssU0FBU3BGLEdBQUcsTUFBTSxDQUFDcUMsU0FBU3pDLEVBQUV5RixTQUFTLENBQUNuQyxTQUFTLEVBQUVDLFFBQVFuRCxHQUFHc0YsTUFBTXJDLElBQUk3SixFQUFRbU0sS0FBSyxTQUFTdkYsRUFBRUMsR0FBRyxNQUFNLENBQUNvQyxTQUFTMUMsRUFBRTJDLEtBQUt0QyxFQUFFd0YsYUFBUSxJQUFTdkYsRUFBRSxLQUFLQSxJQUFJN0csRUFBUXFNLFlBQVksU0FBU3pGLEVBQUVDLEdBQUcsT0FBT3NELElBQUlrQyxZQUFZekYsRUFBRUMsSUFBSTdHLEVBQVFzTSxXQUFXLFNBQVMxRixFQUFFQyxHQUFHLE9BQU9zRCxJQUFJbUMsV0FBVzFGLEVBQUVDLElBQUk3RyxFQUFRdU0sY0FBYyxhQUFhdk0sRUFBUXdNLFVBQVUsU0FBUzVGLEVBQUVDLEdBQUcsT0FBT3NELElBQUlxQyxVQUFVNUYsRUFBRUMsSUFBSTdHLEVBQVF5TSxvQkFBb0IsU0FBUzdGLEVBQUVDLEVBQUVDLEdBQUcsT0FBT3FELElBQUlzQyxvQkFBb0I3RixFQUFFQyxFQUFFQyxJQUM5YzlHLEVBQVEwTSxnQkFBZ0IsU0FBUzlGLEVBQUVDLEdBQUcsT0FBT3NELElBQUl1QyxnQkFBZ0I5RixFQUFFQyxJQUFJN0csRUFBUTJNLFFBQVEsU0FBUy9GLEVBQUVDLEdBQUcsT0FBT3NELElBQUl3QyxRQUFRL0YsRUFBRUMsSUFBSTdHLEVBQVE0TSxXQUFXLFNBQVNoRyxFQUFFQyxFQUFFQyxHQUFHLE9BQU9xRCxJQUFJeUMsV0FBV2hHLEVBQUVDLEVBQUVDLElBQUk5RyxFQUFRNk0sT0FBTyxTQUFTakcsR0FBRyxPQUFPdUQsSUFBSTBDLE9BQU9qRyxJQUFJNUcsRUFBUThNLFNBQVMsU0FBU2xHLEdBQUcsT0FBT3VELElBQUkyQyxTQUFTbEcsSUFBSTVHLEVBQVErTSxRQUFRLFUsY0NuQm5Uak4sRUFBT0UsUUFBVSxFQUFqQixNLGNDQUEsUSxjQ0RGLElBQ01tTSxFQWVGYSxFQUFZLFdBQ2QsSUFBSWIsRUFBTyxHQUNYLE9BQU8sU0FBa0JoSCxHQUN2QixRQUE0QixJQUFqQmdILEVBQUtoSCxHQUF5QixDQUN2QyxJQUFJOEgsRUFBY0MsU0FBU0MsY0FBY2hJLEdBRXpDLEdBQUlpSSxPQUFPQyxtQkFBcUJKLGFBQXVCRyxPQUFPQyxrQkFDNUQsSUFHRUosRUFBY0EsRUFBWUssZ0JBQWdCQyxLQUMxQyxNQUFPN0UsR0FFUHVFLEVBQWMsS0FJbEJkLEVBQUtoSCxHQUFVOEgsRUFHakIsT0FBT2QsRUFBS2hILElBcEJBLEdBd0JacUksRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJQyxHQUFVLEVBRUxqTixFQUFJLEVBQUdBLEVBQUk4TSxFQUFZek0sT0FBUUwsSUFDdEMsR0FBSThNLEVBQVk5TSxHQUFHZ04sYUFBZUEsRUFBWSxDQUM1Q0MsRUFBU2pOLEVBQ1QsTUFJSixPQUFPaU4sRUFHVCxTQUFTQyxFQUFhMU4sRUFBTTJOLEdBSTFCLElBSEEsSUFBSUMsRUFBYSxHQUNiQyxFQUFjLEdBRVRyTixFQUFJLEVBQUdBLEVBQUlSLEVBQUthLE9BQVFMLElBQUssQ0FDcEMsSUFBSUosRUFBT0osRUFBS1EsR0FDWlgsRUFBSzhOLEVBQVFHLEtBQU8xTixFQUFLLEdBQUt1TixFQUFRRyxLQUFPMU4sRUFBSyxHQUNsRHFLLEVBQVFtRCxFQUFXL04sSUFBTyxFQUMxQjJOLEVBQWEsR0FBR2xOLE9BQU9ULEVBQUksS0FBS1MsT0FBT21LLEdBQzNDbUQsRUFBVy9OLEdBQU00SyxFQUFRLEVBQ3pCLElBQUlzRCxFQUFRUixFQUFxQkMsR0FDN0JRLEVBQU0sQ0FDUkMsSUFBSzdOLEVBQUssR0FDVjhOLE1BQU85TixFQUFLLEdBQ1orTixVQUFXL04sRUFBSyxLQUdILElBQVgyTixHQUNGVCxFQUFZUyxHQUFPSyxhQUNuQmQsRUFBWVMsR0FBT3hHLFFBQVF5RyxJQUUzQlYsRUFBWTNOLEtBQUssQ0FDZjZOLFdBQVlBLEVBQ1pqRyxRQUFTOEcsRUFBU0wsRUFBS0wsR0FDdkJTLFdBQVksSUFJaEJQLEVBQVlsTyxLQUFLNk4sR0FHbkIsT0FBT0ssRUFHVCxTQUFTUyxFQUFtQlgsR0FDMUIsSUFBSVksRUFBUXZCLFNBQVN6QixjQUFjLFNBQy9CaUQsRUFBYWIsRUFBUWEsWUFBYyxHQUV2QyxRQUFnQyxJQUFyQkEsRUFBV0MsTUFBdUIsQ0FDM0MsSUFBSUEsRUFBbUQsS0FFbkRBLElBQ0ZELEVBQVdDLE1BQVFBLEdBUXZCLEdBSkFoTixPQUFPc0QsS0FBS3lKLEdBQVkzSixTQUFRLFNBQVVTLEdBQ3hDaUosRUFBTUcsYUFBYXBKLEVBQUtrSixFQUFXbEosT0FHUCxtQkFBbkJxSSxFQUFRZ0IsT0FDakJoQixFQUFRZ0IsT0FBT0osT0FDVixDQUNMLElBQUl0SixFQUFTNkgsRUFBVWEsRUFBUWdCLFFBQVUsUUFFekMsSUFBSzFKLEVBQ0gsTUFBTSxJQUFJMkMsTUFBTSwyR0FHbEIzQyxFQUFPMkosWUFBWUwsR0FHckIsT0FBT0EsRUFjVCxJQUNNTSxFQURGQyxHQUNFRCxFQUFZLEdBQ1QsU0FBaUJkLEVBQU9nQixHQUU3QixPQURBRixFQUFVZCxHQUFTZ0IsRUFDWkYsRUFBVUcsT0FBT0MsU0FBUzFPLEtBQUssUUFJMUMsU0FBUzJPLEVBQW9CWCxFQUFPUixFQUFPb0IsRUFBUW5CLEdBQ2pELElBQUlDLEVBQU1rQixFQUFTLEdBQUtuQixFQUFJRSxNQUFRLFVBQVU1TixPQUFPME4sRUFBSUUsTUFBTyxNQUFNNU4sT0FBTzBOLEVBQUlDLElBQUssS0FBT0QsRUFBSUMsSUFJakcsR0FBSU0sRUFBTWEsV0FDUmIsRUFBTWEsV0FBV0MsUUFBVVAsRUFBWWYsRUFBT0UsT0FDekMsQ0FDTCxJQUFJcUIsRUFBVXRDLFNBQVN1QyxlQUFldEIsR0FDbEN1QixFQUFhakIsRUFBTWlCLFdBRW5CQSxFQUFXekIsSUFDYlEsRUFBTWtCLFlBQVlELEVBQVd6QixJQUczQnlCLEVBQVczTyxPQUNiME4sRUFBTW1CLGFBQWFKLEVBQVNFLEVBQVd6QixJQUV2Q1EsRUFBTUssWUFBWVUsSUFLeEIsU0FBU0ssRUFBV3BCLEVBQU9aLEVBQVNLLEdBQ2xDLElBQUlDLEVBQU1ELEVBQUlDLElBQ1ZDLEVBQVFGLEVBQUlFLE1BQ1pDLEVBQVlILEVBQUlHLFVBZXBCLEdBYklELEVBQ0ZLLEVBQU1HLGFBQWEsUUFBU1IsR0FFNUJLLEVBQU1xQixnQkFBZ0IsU0FHcEJ6QixHQUE2QixvQkFBVGhMLE9BQ3RCOEssR0FBTyx1REFBdUQzTixPQUFPNkMsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVMkssTUFBZSxRQU1sSUksRUFBTWEsV0FDUmIsRUFBTWEsV0FBV0MsUUFBVXBCLE1BQ3RCLENBQ0wsS0FBT00sRUFBTXNCLFlBQ1h0QixFQUFNa0IsWUFBWWxCLEVBQU1zQixZQUcxQnRCLEVBQU1LLFlBQVk1QixTQUFTdUMsZUFBZXRCLEtBSTlDLElBQUk2QixFQUFZLEtBQ1pDLEVBQW1CLEVBRXZCLFNBQVMxQixFQUFTTCxFQUFLTCxHQUNyQixJQUFJWSxFQUNBeUIsRUFDQWIsRUFFSixHQUFJeEIsRUFBUW1DLFVBQVcsQ0FDckIsSUFBSUcsRUFBYUYsSUFDakJ4QixFQUFRdUIsSUFBY0EsRUFBWXhCLEVBQW1CWCxJQUNyRHFDLEVBQVNkLEVBQW9CekQsS0FBSyxLQUFNOEMsRUFBTzBCLEdBQVksR0FDM0RkLEVBQVNELEVBQW9CekQsS0FBSyxLQUFNOEMsRUFBTzBCLEdBQVksUUFFM0QxQixFQUFRRCxFQUFtQlgsR0FDM0JxQyxFQUFTTCxFQUFXbEUsS0FBSyxLQUFNOEMsRUFBT1osR0FFdEN3QixFQUFTLFlBeEZiLFNBQTRCWixHQUUxQixHQUF5QixPQUFyQkEsRUFBTTJCLFdBQ1IsT0FBTyxFQUdUM0IsRUFBTTJCLFdBQVdULFlBQVlsQixHQW1GekI0QixDQUFtQjVCLElBS3ZCLE9BREF5QixFQUFPaEMsR0FDQSxTQUFxQm9DLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPbkMsTUFBUUQsRUFBSUMsS0FBT21DLEVBQU9sQyxRQUFVRixFQUFJRSxPQUFTa0MsRUFBT2pDLFlBQWNILEVBQUlHLFVBQ25GLE9BR0Y2QixFQUFPaEMsRUFBTW9DLFFBRWJqQixLQUtOdlAsRUFBT0UsUUFBVSxTQUFVRSxFQUFNMk4sSUFDL0JBLEVBQVVBLEdBQVcsSUFHUm1DLFdBQTBDLGtCQUF0Qm5DLEVBQVFtQyxZQUN2Q25DLEVBQVFtQyxnQkFyT1ksSUFBVDdELElBTVRBLEVBQU9nRCxRQUFRL0IsUUFBVUYsVUFBWUEsU0FBU3FELE1BQVFuRCxPQUFPb0QsT0FHeERyRSxJQWdPVCxJQUFJc0UsRUFBa0I3QyxFQUR0QjFOLEVBQU9BLEdBQVEsR0FDMEIyTixHQUN6QyxPQUFPLFNBQWdCNkMsR0FHckIsR0FGQUEsRUFBVUEsR0FBVyxHQUUyQixtQkFBNUMvTyxPQUFPZSxVQUFVdkMsU0FBU3dDLEtBQUsrTixHQUFuQyxDQUlBLElBQUssSUFBSWhRLEVBQUksRUFBR0EsRUFBSStQLEVBQWdCMVAsT0FBUUwsSUFBSyxDQUMvQyxJQUNJdU4sRUFBUVIsRUFES2dELEVBQWdCL1AsSUFFakM4TSxFQUFZUyxHQUFPSyxhQUtyQixJQUZBLElBQUlxQyxFQUFxQi9DLEVBQWE4QyxFQUFTN0MsR0FFdEM3TSxFQUFLLEVBQUdBLEVBQUt5UCxFQUFnQjFQLE9BQVFDLElBQU0sQ0FDbEQsSUFFSTRQLEVBQVNuRCxFQUZLZ0QsRUFBZ0J6UCxJQUlLLElBQW5Dd00sRUFBWW9ELEdBQVF0QyxhQUN0QmQsRUFBWW9ELEdBQVFuSixVQUVwQitGLEVBQVlxRCxPQUFPRCxFQUFRLElBSS9CSCxFQUFrQkUsT0N6UWxCRyxFQUEyQixHQUcvQixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCaFAsSUFBakJpUCxFQUNILE9BQU9BLEVBQWFqUixRQUdyQixJQUFJRixFQUFTZ1IsRUFBeUJFLEdBQVksQ0FDakRqUixHQUFJaVIsRUFFSmhSLFFBQVMsSUFPVixPQUhBa1IsRUFBb0JGLEdBQVVsUixFQUFRQSxFQUFPRSxRQUFTK1EsR0FHL0NqUixFQUFPRSxRQ3BCZitRLEVBQW9CdE8sRUFBSzNDLElBQ3hCLElBQUlxUixFQUFTclIsR0FBVUEsRUFBT3NSLFdBQzdCLElBQU90UixFQUFpQixRQUN4QixJQUFNLEVBRVAsT0FEQWlSLEVBQW9CcEksRUFBRXdJLEVBQVEsQ0FBRXZLLEVBQUd1SyxJQUM1QkEsR0NMUkosRUFBb0JwSSxFQUFJLENBQUMzSSxFQUFTcVIsS0FDakMsSUFBSSxJQUFJN0wsS0FBTzZMLEVBQ1hOLEVBQW9CeE8sRUFBRThPLEVBQVk3TCxLQUFTdUwsRUFBb0J4TyxFQUFFdkMsRUFBU3dGLElBQzVFN0QsT0FBTzJQLGVBQWV0UixFQUFTd0YsRUFBSyxDQUFFK0wsWUFBWSxFQUFNQyxJQUFLSCxFQUFXN0wsTUNKM0V1TCxFQUFvQnhPLEVBQUksQ0FBQzJMLEVBQUt1RCxJQUFVOVAsT0FBT2UsVUFBVXdCLGVBQWV2QixLQUFLdUwsRUFBS3VELEcsVUNBdkUsRUFVQSxFQUNBQyxFQVZBQyxFLFFDQVcsRSxPQUFBMUcsZUFBYyxJQUFJMkcsTUFDYXRHLFVERDFDcUcsRUFRUixJQUFhLEVBQVcsS0FQZEEsRUFBaUIsT0FBSSxHQUFLLFNBQ25DQSxFQUFTQSxFQUFpQixPQUFJLEdBQUssU0FDbkNBLEVBQVNBLEVBQWtCLFFBQUksR0FBSyxVQUNwQ0EsRUFBU0EsRUFBb0IsVUFBSSxHQUFLLFlBQ3RDQSxFQUFTQSxFQUFtQixTQUFJLEdBQUssV0FDckNBLEVBQVNBLEVBQWlCLE9BQUksR0FBSyxTQUNuQ0EsRUFBU0EsRUFBbUIsU0FBSSxHQUFLLFlBRzlCRCxFQWFSLElBQVUsRUFBUSxLQVpYQSxFQUFlLFFBQUksR0FBSyxVQUM5QkEsRUFBTUEsRUFBZ0IsU0FBSSxHQUFLLFdBQy9CQSxFQUFNQSxFQUFhLE1BQUksR0FBSyxRQUM1QkEsRUFBTUEsRUFBYSxNQUFJLEdBQUssUUFDNUJBLEVBQU1BLEVBQVcsSUFBSSxHQUFLLE1BQzFCQSxFQUFNQSxFQUFZLEtBQUksR0FBSyxPQUMzQkEsRUFBTUEsRUFBWSxLQUFJLEdBQUssT0FDM0JBLEVBQU1BLEVBQWMsT0FBSSxHQUFLLFNBQzdCQSxFQUFNQSxFQUFpQixVQUFJLEdBQUssWUFDaENBLEVBQU1BLEVBQWUsUUFBSSxJQUFNLFVBQy9CQSxFQUFNQSxFQUFnQixTQUFJLElBQU0sV0FDaENBLEVBQU1BLEVBQWdCLFNBQUksSUFBTSxXLCtCRWZ2QixJQUFJLElBTEgsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixJQU1MLFkiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIip7Zm9udC1mYW1pbHk6XFxcIlJvYm90b1xcXCIsc2Fucy1zZXJpZn1odG1se2ZvbnQtc2l6ZToxMHB4fWJvZHl7Zm9udC1zaXplOjEwMCV9LmNhbGVuZGFye3BhZGRpbmc6LjVyZW07cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5jYWxlbmRhci1wbGFjZW1lbnQtbGVmdHt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMDAlKTtib3R0b206LTEwcHg7bGVmdDowfS5jYWxlbmRhci1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmV9LmNhbGVuZGFyLW5hdmlnYXRpb257ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjtmbGV4LXdyYXA6d3JhcDtmb250LXdlaWdodDo1MDA7Y29sb3I6IzNjNDA0MztwYWRkaW5nOjAgMXJlbTttYXJnaW4tYm90dG9tOi43cmVtfS5jYWxlbmRhci1uYXZpZ2F0aW9uX195ZWFyLC5jYWxlbmRhci1uYXZpZ2F0aW9uX19tb250aHtmb250LXNpemU6MS4zcmVtfS5jYWxlbmRhci1uYXZpZ2F0aW9uX19tb250aHttYXJnaW4tcmlnaHQ6LjVyZW19LmNhbGVuZGFyLW5hdmlnYXRpb25fX2J0bntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO291dGxpbmU6bm9uZTtwYWRkaW5nOjA7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcjt3aWR0aDoycmVtO2hlaWdodDoycmVtO2JvcmRlci1yYWRpdXM6NTAlfS5jYWxlbmRhci1uYXZpZ2F0aW9uX19idG46Zmlyc3QtY2hpbGR7bWFyZ2luLXJpZ2h0OjFyZW19LmNhbGVuZGFyLW5hdmlnYXRpb25fX2J0bjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMzIsMzMsMzYsLjAzOSl9LmNhbGVuZGFyLW5hdmlnYXRpb25fX2J0biBzdmd7aGVpZ2h0OjFyZW07d2lkdGg6MS41cmVtO2NvbG9yOiM1ZjYzNjg7ZmlsbDojNWY2MzY4fS5sb2NhbC1kYXlze2Rpc3BsYXk6ZmxleH0ubG9jYWwtZGF5c19fbmFtZXtwYWRkaW5nOi41cmVtO3RleHQtYWxpZ246Y2VudGVyO2NvbG9yOiM3MDc1N2E7Zm9udC1zaXplOjFyZW07Zm9udC13ZWlnaHQ6NTAwfS5kYXlzLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXB9LmRheXMtaXRlbXt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOjIuNHJlbTtoZWlnaHQ6Mi40cmVtO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjUwMDt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMTAwbXMgbGluZWFyO291dGxpbmU6bm9uZX0uZGF5cy1pdGVtX19jb250YWluZXJ7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5kYXlzLWl0ZW0uYWN0aXZle2JhY2tncm91bmQtY29sb3I6I2QyZTNmYyAhaW1wb3J0YW50O2NvbG9yOiMxODVhYmMgIWltcG9ydGFudH0uZGF5cy1pdGVtLnByZXZpb3VzLC5kYXlzLWl0ZW0ubmV4dHtjb2xvcjojNzA3NTdhfS5kYXlzLWl0ZW0uY3VycmVudHtjb2xvcjojM2M0MDQzfS5kYXlzLWl0ZW06aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZjFmM2Y0fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0NhbGVuZGFyL2luZGV4LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsRUFDRSwrQkFBQSxDQUdGLEtBQ0UsY0FBQSxDQUdGLEtBQ0UsY0FBQSxDQUdGLFVBQ0UsYUFBQSxDQUNBLGlCQUFBLENBQ0EscUJBQUEsQ0FDQSx5QkFDRSwwQkFBQSxDQUNBLFlBQUEsQ0FDQSxNQUFBLENBRUYsb0JBQ0UsaUJBQUEsQ0FFRixxQkFDRSxZQUFBLENBQ0EsNkJBQUEsQ0FDQSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSxlQUFBLENBQ0EsYUFBQSxDQUNBLGNBQUEsQ0FDQSxtQkFBQSxDQUNBLHVEQUVFLGdCQUFBLENBRUYsNEJBQ0Usa0JBQUEsQ0FFRiwwQkFDRSw0QkFBQSxDQUNBLFdBQUEsQ0FDQSxjQUFBLENBQ0EsWUFBQSxDQUNBLFNBQUEsQ0FDQSx3Q0FBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxzQ0FDRSxpQkFBQSxDQUVGLGdDQUNFLG9DQUFBLENBRUYsOEJBQ0UsV0FBQSxDQUNBLFlBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQU1SLFlBQ0UsWUFBQSxDQUNBLGtCQUNFLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLGFBQUEsQ0FDQSxjQUFBLENBQ0EsZUFBQSxDQUtGLGdCQUNFLFlBQUEsQ0FDQSxjQUFBLENBRUYsV0FDRSxpQkFBQSxDQUNBLDRCQUFBLENBQ0EsV0FBQSxDQUNBLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxhQUFBLENBQ0EsY0FBQSxDQUNBLGVBQUEsQ0FDQSx3Q0FBQSxDQUNBLFlBQUEsQ0FDQSxzQkFDRSxxQkFBQSxDQUNBLFlBQUEsQ0FDQSxzQkFBQSxDQUVGLGtCQUNFLG1DQUFBLENBQ0Esd0JBQUEsQ0FFRixvQ0FFRSxhQUFBLENBRUYsbUJBQ0UsYUFBQSxDQUVGLGlCQUNFLHdCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJSb2JvdG9cXFwiLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG5odG1sIHtcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuXFxuYm9keSB7XFxuICBmb250LXNpemU6IDEwMCU7XFxufVxcblxcbi5jYWxlbmRhciB7XFxuICBwYWRkaW5nOiAwLjVyZW07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgJi1wbGFjZW1lbnQtbGVmdCB7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcXG4gICAgYm90dG9tOiAtMTBweDtcXG4gICAgbGVmdDogMDtcXG4gIH1cXG4gICYtY29udGFpbmVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgfVxcbiAgJi1uYXZpZ2F0aW9uIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIGNvbG9yOiAjM2M0MDQzO1xcbiAgICBwYWRkaW5nOiAwIDFyZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDAuN3JlbTtcXG4gICAgJl9feWVhcixcXG4gICAgJl9fbW9udGgge1xcbiAgICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xcbiAgICB9XFxuICAgICZfX21vbnRoIHtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG4gICAgfVxcbiAgICAmX19idG4ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgb3V0bGluZTogbm9uZTtcXG4gICAgICBwYWRkaW5nOiAwO1xcbiAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMTAwbXMgbGluZWFyO1xcbiAgICAgIHdpZHRoOiAycmVtO1xcbiAgICAgIGhlaWdodDogMnJlbTtcXG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgICAgJjpmaXJzdC1jaGlsZCB7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgICAgfVxcbiAgICAgICY6aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgzMiwgMzMsIDM2LCAwLjAzOSk7XFxuICAgICAgfVxcbiAgICAgIHN2ZyB7XFxuICAgICAgICBoZWlnaHQ6IDFyZW07XFxuICAgICAgICB3aWR0aDogMS41cmVtO1xcbiAgICAgICAgY29sb3I6ICM1ZjYzNjg7XFxuICAgICAgICBmaWxsOiAjNWY2MzY4O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4ubG9jYWwtZGF5cyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgJl9fbmFtZSB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBjb2xvcjogIzcwNzU3YTtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbiAgfVxcbn1cXG5cXG4uZGF5cyB7XFxuICAmLWNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gIH1cXG4gICYtaXRlbSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIHdpZHRoOiAyLjRyZW07XFxuICAgIGhlaWdodDogMi40cmVtO1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMTAwbXMgbGluZWFyO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICAmX19jb250YWluZXIge1xcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgfVxcbiAgICAmLmFjdGl2ZSB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2QyZTNmYyAhaW1wb3J0YW50O1xcbiAgICAgIGNvbG9yOiAjMTg1YWJjICFpbXBvcnRhbnQ7XFxuICAgIH1cXG4gICAgJi5wcmV2aW91cyxcXG4gICAgJi5uZXh0IHtcXG4gICAgICBjb2xvcjogIzcwNzU3YTtcXG4gICAgfVxcbiAgICAmLmN1cnJlbnQge1xcbiAgICAgIGNvbG9yOiAjM2M0MDQzO1xcbiAgICB9XFxuICAgICY6aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMWYzZjQ7XFxuICAgIH1cXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3JlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImV4cG9ydCB2YXIgTG9jYWxEYXk7XG4oZnVuY3Rpb24gKExvY2FsRGF5KSB7XG4gICAgTG9jYWxEYXlbTG9jYWxEYXlbXCJTdW5kYXlcIl0gPSAwXSA9IFwiU3VuZGF5XCI7XG4gICAgTG9jYWxEYXlbTG9jYWxEYXlbXCJNb25kYXlcIl0gPSAxXSA9IFwiTW9uZGF5XCI7XG4gICAgTG9jYWxEYXlbTG9jYWxEYXlbXCJUdWVzZGF5XCJdID0gMl0gPSBcIlR1ZXNkYXlcIjtcbiAgICBMb2NhbERheVtMb2NhbERheVtcIldlZG5lc2RheVwiXSA9IDNdID0gXCJXZWRuZXNkYXlcIjtcbiAgICBMb2NhbERheVtMb2NhbERheVtcIlRodXJzZGF5XCJdID0gNF0gPSBcIlRodXJzZGF5XCI7XG4gICAgTG9jYWxEYXlbTG9jYWxEYXlbXCJGcmlkYXlcIl0gPSA1XSA9IFwiRnJpZGF5XCI7XG4gICAgTG9jYWxEYXlbTG9jYWxEYXlbXCJTYXR1cmRheVwiXSA9IDZdID0gXCJTYXR1cmRheVwiO1xufSkoTG9jYWxEYXkgfHwgKExvY2FsRGF5ID0ge30pKTtcbmV4cG9ydCB2YXIgTW9udGg7XG4oZnVuY3Rpb24gKE1vbnRoKSB7XG4gICAgTW9udGhbTW9udGhbXCJKYW51YXJ5XCJdID0gMV0gPSBcIkphbnVhcnlcIjtcbiAgICBNb250aFtNb250aFtcIkZlYnJ1YXJ5XCJdID0gMl0gPSBcIkZlYnJ1YXJ5XCI7XG4gICAgTW9udGhbTW9udGhbXCJNYXJjaFwiXSA9IDNdID0gXCJNYXJjaFwiO1xuICAgIE1vbnRoW01vbnRoW1wiQXByaWxcIl0gPSA0XSA9IFwiQXByaWxcIjtcbiAgICBNb250aFtNb250aFtcIk1heVwiXSA9IDVdID0gXCJNYXlcIjtcbiAgICBNb250aFtNb250aFtcIkp1bmVcIl0gPSA2XSA9IFwiSnVuZVwiO1xuICAgIE1vbnRoW01vbnRoW1wiSnVseVwiXSA9IDddID0gXCJKdWx5XCI7XG4gICAgTW9udGhbTW9udGhbXCJBdWd1c3RcIl0gPSA4XSA9IFwiQXVndXN0XCI7XG4gICAgTW9udGhbTW9udGhbXCJTZXB0ZW1iZXJcIl0gPSA5XSA9IFwiU2VwdGVtYmVyXCI7XG4gICAgTW9udGhbTW9udGhbXCJPY3RvYmVyXCJdID0gMTBdID0gXCJPY3RvYmVyXCI7XG4gICAgTW9udGhbTW9udGhbXCJOb3ZlbWJlclwiXSA9IDExXSA9IFwiTm92ZW1iZXJcIjtcbiAgICBNb250aFtNb250aFtcIkRlY2VtYmVyXCJdID0gMTJdID0gXCJEZWNlbWJlclwiO1xufSkoTW9udGggfHwgKE1vbnRoID0ge30pKTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbnZhciBDYWxlbmRhckNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG5ldyBEYXRlKCkpO1xuZXhwb3J0IHZhciBDYWxlbmRhckNvbnRleHRQcm92aWRlciA9IENhbGVuZGFyQ29udGV4dC5Qcm92aWRlcjtcbmV4cG9ydCB2YXIgdXNlQ2FsZW5kYXJDb250ZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdXNlQ29udGV4dChDYWxlbmRhckNvbnRleHQpOyB9O1xuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=